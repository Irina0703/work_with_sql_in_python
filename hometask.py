# -*- coding: utf-8 -*-
"""Копия_блокнота__hometask_04_ipynb_ итог.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i0bjG89CM4Bw8N8KAnpamJ5mC9AreCE8

# Домашнее задание 4
"""

!pip install psycopg2

import psycopg2

!pip install --force-reinstall 'sqlalchemy<2.0.0'

import sqlalchemy

sqlalchemy.__version__

import pandas as pd
pd.set_option('display.max_columns', None)

import warnings
warnings.filterwarnings('ignore')

connection = psycopg2.connect(
    host="ep-proud-frog-a2nmjwqc.eu-central-1.aws.neon.tech",
    database="sql_neon",
    user="imukhanova",
    password="3TeISFLdY1UZ"
    )

from sqlalchemy import create_engine, Integer, String, Column,DateTime,Numeric
from sqlalchemy.orm import sessionmaker,declarative_base
#from sqlalchemy.ext.declarative import declarative_base

connection_string ="postgresql://imukhanova:3TeISFLdY1UZ@ep-proud-frog-a2nmjwqc.eu-central-1.aws.neon.tech/sql_neon?sslmode=require"

engine=create_engine(connection_string)

session = sessionmaker(bind=engine)

cursor = connection.cursor()

"""Максимальный балл за домашнюю работу 10.
Необходимо выполнять все задания в ноутбуке с помощью чистого SQL и SQLAlchemy ORM:
- осуществить подключение к БД
- каждое задание оформить в отдельной ячейке
- результат выполнения запросов записать в pandas dataframe

## Задание 1 (1 балл)

Сформируйте упорядоченный список из первых 10 фамилий в таблице участников?  
Список не должен содержать дубликатов.
"""

sql_1 = '''
select distinct surname
      from sql_neon.cd.members
order by surname
limit 10;
'''

print(sql_1)

cursor.execute(sql_1)
result_1 = cursor.fetchall()
print(result_1)

select_result1 = engine.execute('''select distinct surname
      from sql_neon.cd.members
order by surname
limit 10''').fetchall()

select_result1

df = pd.DataFrame(result_1)
df

"""## Задание 2  (1 балл)

Выведите имя и фамилию последнего зарегистрировавшегося участника, а также дату.
"""

sql_2 = '''
select firstname, surname, joindate
      from cd.members
order by joindate desc
limit 1;
'''

print(sql_2)

cursor.execute(sql_2)
result_2 = cursor.fetchall()
print(result_2)

select_result2 = engine.execute('''select firstname, surname, joindate
      from cd.members
order by joindate desc
limit 1;''').fetchall()

select_result2

df = pd.DataFrame(result_2)
df

"""## Задание 3 (2 балла)

Составьте список времени начала бронирования теннисных кортов на дату "2012-09-21".  
В итоговой выборке верните список пар времени начала и названий объектов, упорядоченных по времени.
"""

sql_3 = '''
select bks.starttime as start, facs.name as name
from
    cd.facilities facs
    inner join cd.bookings bks
        on facs.facid = bks.facid
where
    facs.name in ('Tennis Court 2','Tennis Court 1') and
    bks.starttime >= '2012-09-21' and
    bks.starttime < '2012-09-22'
order by bks.starttime;
'''

print(sql_3)

cursor.execute(sql_3)
result_3 = cursor.fetchall()
print(result_3)

select_result3 = engine.execute('''select firstname, surname, joindate
      from cd.members
order by joindate desc
limit 1;''').fetchall()

select_result3

df = pd.DataFrame(result_3)
df

"""## Задание 4 (2 балла)

Выведите список всех участников, включая человека, который их рекомендовал (если таковой имеется).  
 Убедитесь, что результаты упорядочены по (фамилия, имя).
"""

sql_4 = '''
select mems.firstname as memfname, mems.surname as memsname, recs.firstname as recfname, recs.surname as recsname
    from
        cd.members mems
        left outer join cd.members recs
            on recs.memid = mems.recommendedby
order by memsname, memfname;
'''

print(sql_4)

cursor.execute(sql_4)
result_4 = cursor.fetchall()
print(result_4)

select_result4 = engine.execute('''select mems.firstname as memfname, mems.surname as memsname, recs.firstname as recfname, recs.surname as recsname
    from
        cd.members mems
        left outer join cd.members recs
            on recs.memid = mems.recommendedby
order by memsname, memfname;''').fetchall()

select_result4

df = pd.DataFrame(result_4)
df

"""## Задание 5 (2 балла)

Составьте список чила слотов забронированных по каждой услуге в сентябре 2012ого года.  

В выводе отобразите две колонки: `facid`, `Total Slots`, и отсортируйте по числу слотов.
"""

sql_5 = '''
select bks.facid,count(bks.slots) as Total_Slots
from cd.bookings bks
where bks.starttime >= '2012-09-01' and bks.starttime < '2012-10-01'
group by bks.facid
order by Total_Slots;
'''

print(sql_5)

cursor.execute(sql_5)
result_5 = cursor.fetchall()
print(result_5)

select_result5 = engine.execute('''select bks.facid,count(bks.slots) as Total_Slots
from cd.bookings bks
where bks.starttime >= '2012-09-01' and bks.starttime < '2012-10-01'
group by bks.facid
order by Total_Slots;''').fetchall()

select_result5

df = pd.DataFrame(result_5)
df

"""## Задание 6 (2 балла)

Составьте список бронирований на день 2012-09-14, которые обойдутся участнику (или гостю) более чем в 30 долларов. Помните, что у гостя всегда идентификатор 0 и расходы гостей отличаются от расходов участников (расходы указаны за получасовой слот).

В выводе отобразите три колонки: `member`, `facility`, `cost` и отсортируйте по убыванию стоимости. В колонке `member` объединим имя и фамилию следующим образом:

`mems.firstname || ' ' || mems.surname as member`  
(в данном случае `mems` — это алиас на колонку `members`)
"""

sql_6 = '''
select  mems.firstname || ' ' || mems.surname as member, f.name as facility,
		case
			when mems.memid = 0 then
				b.slots*f.guestcost
			else
				b.slots*f.membercost
		end as cost
	from
		cd.members as mems
		inner join cd.bookings as b
			on mems.memid = b.memid
		inner join cd.facilities as f
			on b.facid = f.facid
	where
		b.starttime between '2012-09-14' and '2012-09-15'
		and (
			mems.memid = 0 and b.slots* f.guestcost > 30
		  	or
		  	mems.memid != 0 and b.slots* f.membercost > 30
		)
order by cost desc;
'''

print(sql_6)

cursor.execute(sql_6)
result_6 = cursor.fetchall()
print(result_6)

select_result_6 = engine.execute('''select  mems.firstname || ' ' || mems.surname as member, f.name as facility,
		case
			when mems.memid = 0 then
				b.slots*f.guestcost
			else
				b.slots*f.membercost
		end as cost
	from
		cd.members as mems
		inner join cd.bookings as b
			on mems.memid = b.memid
		inner join cd.facilities as f
			on b.facid = f.facid
	where
		b.starttime between '2012-09-14' and '2012-09-15'
		and (
			mems.memid = 0 and b.slots* f.guestcost > 30
		  	or
		  	mems.memid != 0 and b.slots* f.membercost > 30
		)
order by cost desc;''').fetchall()

select_result_6

df = pd.DataFrame(result_6)
df

cursor.close()

session = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

from sqlalchemy.schema import MetaData

metadata_sql_neon_db = MetaData()
metadata_sql_neon_db.reflect(bind=engine);

class User(Base):
  __tablename__='members'
  memid = Column(Integer, primary_key=True)
  firstname = Column(String(200),nullable=False)
  surname = Column(String(200),nullable=False)
  address = Column (String(300),  nullable=False)
  telephone = Column (String(20),  nullable=False)
  zipcode=Column(Integer(), nullable=False)
  recomendedby=Column(Integer(), nullable=True)
  joindate=Column(DateTime(),nullable=False)

class Booking(Base):
  __tablename__='bookings'
  bookid = Column(Integer, primary_key=True)
  facid = Column(Integer,nullable=False)
  memid = Column(Integer,nullable=False)
  starttime = Column (DateTime(),nullable=False)
  slots = Column(Integer,nullable=False)

class Facility(Base):
  __tablename__='facilities'
  facid = Column(Integer, primary_key=True)
  name = Column(String(100),nullable=False)
  membercost = Column(Numeric,nullable=False)
  guestcost = Column(Numeric,nullable=False)
  initialoutlay =Column(Numeric,nullable=False)
  monthlymaintance =Column(Numeric,nullable=False)

Base.metadata.create_all(engine)

engine.table_names()

from sqlalchemy.schema import MetaData

metadata_sql_neon_db = MetaData()
metadata_sql_neon_db.reflect(bind=engine);

for table_name in metadata_sql_neon_db.tables:
    print(table_name)

from sqlalchemy import Table
members = Table('members', metadata_demo_db, autoload=True)
bookings = Table('bookings', metadata_demo_db, autoload=True)
facilities = Table('facilities', metadata_demo_db, autoload=True)

print(facilities.columns)

"""Задание №1"""

from sqlalchemy import select
sql_query1 = select(members).\
            order_by(members.c.surname)
result1 = engine.execute(sql_query1)
print(sql_query1, '\n')

result1.fetchall()

"""Задание №2"""

from sqlalchemy import select
from sqlalchemy import desc
sql_query2 = select(members).\
            order_by (desc(members.c.joindate))
result2 = engine.execute(sql_query2)
print(sql_query2, '\n')

result2.fetchone()

